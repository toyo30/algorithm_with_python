# 알고리즘 연습 Level 3
# 01. 중복되는 항목 찾기 II

# (N + 1)의 크기인 리스트에, 1부터 N까지의 임의의 자연수가 요소로 할당되어 있습니다. 그렇다면 어떤 수는 꼭 한 번은 반복되겠지요.

# 예를 들어 [1, 3, 4, 2, 5, 4]와 같은 리스트 있을 수도 있고, [1, 1, 1, 6, 2, 2, 3]과 같은 리스트가 있을 수도 있습니다. (몇 개의 수가 여러 번 중복되어 있을 수도 있습니다.)

# 이러한 리스트에서 반복되는 요소를 찾아내려고 합니다.

# 중복되는 어떠한 수 ‘하나’만 찾아내도 됩니다. 즉 [1, 1, 1, 6, 2, 2, 3]의 예시에서 1, 2를 모두 리턴하지 않고, 1 또는 2 하나만 리턴하게 하면 됩니다.

# 저번 과제에서는 사전을 정의해서 문제를 푸는 방법을 사용했는데요, 이번 과제에서는 두 가지의 제약이 있습니다.

# O(n)O(n) 이상의 공간을 사용할 수 없습니다. 즉 사전이나 리스트와 같이 인풋 리스트의 길이에 비례하는 공간 저장 도구를 사용할 수 없습니다!
# 인풋으로 받는 리스트 some_list의 요소들을 바꾸거나 변형할 수 없습니다.
# 전에 풀었던 같은 문제를 다른 제약들이 걸려 있는 상황에서 풀어보세요.

def find_same_number(some_list):
    # 필요한 경우, start와 end를 옵셔널 파라미터로 만들어도 됩니다.
    # 코드를 쓰세요
    list = []
    k = 1
    for i in range(0, len(some_list)-1):
        list.append(some_list[i])
        for j in range(k, len(some_list)):
            if list[0] == some_list[j]:
                return list[0]
            else:
                pass
        k +=1
        del list[0]
        
    
# 중복되는 수 ‘하나’만 리턴합니다.
print(find_same_number([1, 4, 3, 5, 3, 2]))
print(find_same_number([4, 1, 5, 2, 3, 5]))
print(find_same_number([5, 2, 3, 4, 1, 6, 7, 8, 9, 3]))